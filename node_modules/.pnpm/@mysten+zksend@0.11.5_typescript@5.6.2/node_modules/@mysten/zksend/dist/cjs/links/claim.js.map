{
  "version": 3,
  "sources": ["../../../src/links/claim.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs } from '@mysten/sui/bcs';\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\nimport type {\n\tCoinStruct,\n\tSuiObjectData,\n\tSuiTransaction,\n\tSuiTransactionBlockResponse,\n} from '@mysten/sui/client';\nimport type { Keypair } from '@mysten/sui/cryptography';\nimport { Ed25519Keypair } from '@mysten/sui/keypairs/ed25519';\nimport type { TransactionObjectArgument } from '@mysten/sui/transactions';\nimport { Transaction } from '@mysten/sui/transactions';\nimport {\n\tfromBase64,\n\tnormalizeStructTag,\n\tnormalizeSuiAddress,\n\tnormalizeSuiObjectId,\n\tparseStructTag,\n\tSUI_TYPE_ARG,\n\ttoBase64,\n} from '@mysten/sui/utils';\n\nimport type { ZkSendLinkBuilderOptions } from './builder.js';\nimport { ZkSendLinkBuilder } from './builder.js';\nimport type { LinkAssets } from './utils.js';\nimport { getAssetsFromTransaction, isOwner, ownedAfterChange } from './utils.js';\nimport type { ZkBagContractOptions } from './zk-bag.js';\nimport { getContractIds, ZkBag } from './zk-bag.js';\n\nconst DEFAULT_ZK_SEND_LINK_OPTIONS = {\n\thost: 'https://zksend.com',\n\tpath: '/claim',\n\tnetwork: 'mainnet' as const,\n};\n\nconst SUI_COIN_TYPE = normalizeStructTag(SUI_TYPE_ARG);\nconst SUI_COIN_OBJECT_TYPE = normalizeStructTag('0x2::coin::Coin<0x2::sui::SUI>');\n\nexport type ZkSendLinkOptions = {\n\tclaimApi?: string;\n\tkeypair?: Keypair;\n\tclient?: SuiClient;\n\tnetwork?: 'mainnet' | 'testnet';\n\thost?: string;\n\tpath?: string;\n\taddress?: string;\n\tisContractLink: boolean;\n\tcontract?: ZkBagContractOptions | null;\n} & (\n\t| {\n\t\t\taddress: string;\n\t\t\tkeypair?: never;\n\t  }\n\t| {\n\t\t\tkeypair: Keypair;\n\t\t\taddress?: never;\n\t  }\n);\n\nexport class ZkSendLink {\n\taddress: string;\n\tkeypair?: Keypair;\n\tcreatorAddress?: string;\n\tassets?: LinkAssets;\n\tclaimed?: boolean;\n\tbagObject?: SuiObjectData | null;\n\n\t#client: SuiClient;\n\t#contract?: ZkBag<ZkBagContractOptions>;\n\t#network: 'mainnet' | 'testnet';\n\t#host: string;\n\t#path: string;\n\t#claimApi: string;\n\n\t// State for non-contract based links\n\t#gasCoin?: CoinStruct;\n\t#hasSui = false;\n\t#ownedObjects: {\n\t\tobjectId: string;\n\t\tversion: string;\n\t\tdigest: string;\n\t\ttype: string;\n\t}[] = [];\n\n\tconstructor({\n\t\tnetwork = DEFAULT_ZK_SEND_LINK_OPTIONS.network,\n\t\tclient = new SuiClient({ url: getFullnodeUrl(network) }),\n\t\tkeypair,\n\t\tcontract = getContractIds(network),\n\t\taddress,\n\t\thost = DEFAULT_ZK_SEND_LINK_OPTIONS.host,\n\t\tpath = DEFAULT_ZK_SEND_LINK_OPTIONS.path,\n\t\tclaimApi = `${host}/api`,\n\t\tisContractLink,\n\t}: ZkSendLinkOptions) {\n\t\tif (!keypair && !address) {\n\t\t\tthrow new Error('Either keypair or address must be provided');\n\t\t}\n\n\t\tthis.#client = client;\n\t\tthis.keypair = keypair;\n\t\tthis.address = address ?? keypair!.toSuiAddress();\n\t\tthis.#claimApi = claimApi;\n\t\tthis.#network = network;\n\t\tthis.#host = host;\n\t\tthis.#path = path;\n\n\t\tif (isContractLink) {\n\t\t\tif (!contract) {\n\t\t\t\tthrow new Error('Contract options are required for contract based links');\n\t\t\t}\n\n\t\t\tthis.#contract = new ZkBag(contract.packageId, contract);\n\t\t}\n\t}\n\n\tstatic async fromUrl(\n\t\turl: string,\n\t\toptions: Omit<ZkSendLinkOptions, 'keypair' | 'address' | 'isContractLink'> = {},\n\t) {\n\t\tconst parsed = new URL(url);\n\t\tconst isContractLink = parsed.hash.startsWith('#$');\n\n\t\tlet link: ZkSendLink;\n\t\tif (isContractLink) {\n\t\t\tconst keypair = Ed25519Keypair.fromSecretKey(fromBase64(parsed.hash.slice(2)));\n\t\t\tlink = new ZkSendLink({\n\t\t\t\t...options,\n\t\t\t\tkeypair,\n\t\t\t\tnetwork: parsed.searchParams.get('network') === 'testnet' ? 'testnet' : 'mainnet',\n\t\t\t\thost: `${parsed.protocol}//${parsed.host}`,\n\t\t\t\tpath: parsed.pathname,\n\t\t\t\tisContractLink: true,\n\t\t\t});\n\t\t} else {\n\t\t\tconst keypair = Ed25519Keypair.fromSecretKey(\n\t\t\t\tfromBase64(isContractLink ? parsed.hash.slice(2) : parsed.hash.slice(1)),\n\t\t\t);\n\n\t\t\tlink = new ZkSendLink({\n\t\t\t\t...options,\n\t\t\t\tkeypair,\n\t\t\t\tnetwork: parsed.searchParams.get('network') === 'testnet' ? 'testnet' : 'mainnet',\n\t\t\t\thost: `${parsed.protocol}//${parsed.host}`,\n\t\t\t\tpath: parsed.pathname,\n\t\t\t\tisContractLink: false,\n\t\t\t});\n\t\t}\n\n\t\tawait link.loadAssets();\n\n\t\treturn link;\n\t}\n\n\tstatic async fromAddress(\n\t\taddress: string,\n\t\toptions: Omit<ZkSendLinkOptions, 'keypair' | 'address' | 'isContractLink'>,\n\t) {\n\t\tconst link = new ZkSendLink({\n\t\t\t...options,\n\t\t\taddress,\n\t\t\tisContractLink: true,\n\t\t});\n\n\t\tawait link.loadAssets();\n\n\t\treturn link;\n\t}\n\n\tasync loadClaimedStatus() {\n\t\tawait this.#loadBag({ loadAssets: false });\n\t}\n\n\tasync loadAssets(\n\t\toptions: {\n\t\t\ttransaction?: SuiTransactionBlockResponse;\n\t\t\tloadClaimedAssets?: boolean;\n\t\t} = {},\n\t) {\n\t\tif (this.#contract) {\n\t\t\tawait this.#loadBag(options);\n\t\t} else {\n\t\t\tawait this.#loadOwnedObjects(options);\n\t\t}\n\t}\n\n\tasync claimAssets(\n\t\taddress: string,\n\t\t{\n\t\t\treclaim,\n\t\t\tsign,\n\t\t}:\n\t\t\t| { reclaim?: false; sign?: never }\n\t\t\t| {\n\t\t\t\t\treclaim: true;\n\t\t\t\t\tsign: (transaction: Uint8Array) => Promise<string>;\n\t\t\t  } = {},\n\t) {\n\t\tif (!this.keypair && !sign) {\n\t\t\tthrow new Error('Cannot claim assets without links keypair');\n\t\t}\n\n\t\tif (this.claimed) {\n\t\t\tthrow new Error('Assets have already been claimed');\n\t\t}\n\n\t\tif (!this.#contract) {\n\t\t\tconst bytes = await this.createClaimTransaction(address).build({\n\t\t\t\tclient: this.#client,\n\t\t\t});\n\t\t\tconst signature = sign\n\t\t\t\t? await sign(bytes)\n\t\t\t\t: (await this.keypair!.signTransaction(bytes)).signature;\n\n\t\t\treturn this.#client.executeTransactionBlock({\n\t\t\t\ttransactionBlock: bytes,\n\t\t\t\tsignature,\n\t\t\t});\n\t\t}\n\n\t\tif (!this.assets) {\n\t\t\tawait this.#loadBag();\n\t\t}\n\n\t\tconst tx = this.createClaimTransaction(address, { reclaim });\n\n\t\tconst sponsored = await this.#createSponsoredTransaction(\n\t\t\ttx,\n\t\t\taddress,\n\t\t\treclaim ? address : this.keypair!.toSuiAddress(),\n\t\t);\n\n\t\tconst bytes = fromBase64(sponsored.bytes);\n\t\tconst signature = sign\n\t\t\t? await sign(bytes)\n\t\t\t: (await this.keypair!.signTransaction(bytes)).signature;\n\n\t\tconst { digest } = await this.#executeSponsoredTransaction(sponsored, signature);\n\n\t\tconst result = await this.#client.waitForTransaction({\n\t\t\tdigest,\n\t\t\toptions: { showEffects: true },\n\t\t});\n\n\t\tif (result.effects?.status.status !== 'success') {\n\t\t\tthrow new Error(\n\t\t\t\t`Claim transaction failed: ${result.effects?.status.error ?? 'Unknown error'}`,\n\t\t\t);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tcreateClaimTransaction(\n\t\taddress: string,\n\t\t{\n\t\t\treclaim,\n\t\t}: {\n\t\t\treclaim?: boolean;\n\t\t} = {},\n\t) {\n\t\tif (!this.#contract) {\n\t\t\treturn this.#createNonContractClaimTransaction(address);\n\t\t}\n\n\t\tif (!this.keypair && !reclaim) {\n\t\t\tthrow new Error('Cannot claim assets without the links keypair');\n\t\t}\n\n\t\tconst tx = new Transaction();\n\t\tconst sender = reclaim ? address : this.keypair!.toSuiAddress();\n\t\ttx.setSender(sender);\n\n\t\tconst store = tx.object(this.#contract.ids.bagStoreId);\n\t\tconst command = reclaim\n\t\t\t? this.#contract.reclaim({ arguments: [store, this.address] })\n\t\t\t: this.#contract.init_claim({ arguments: [store] });\n\n\t\tconst [bag, proof] = tx.add(command);\n\n\t\tconst objectsToTransfer: TransactionObjectArgument[] = [];\n\n\t\tconst objects = [...(this.assets?.coins ?? []), ...(this.assets?.nfts ?? [])];\n\n\t\tfor (const object of objects) {\n\t\t\tobjectsToTransfer.push(\n\t\t\t\tthis.#contract.claim({\n\t\t\t\t\targuments: [\n\t\t\t\t\t\tbag,\n\t\t\t\t\t\tproof,\n\t\t\t\t\t\ttx.receivingRef({\n\t\t\t\t\t\t\tobjectId: object.objectId,\n\t\t\t\t\t\t\tversion: object.version,\n\t\t\t\t\t\t\tdigest: object.digest,\n\t\t\t\t\t\t}),\n\t\t\t\t\t],\n\t\t\t\t\ttypeArguments: [object.type],\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\tif (objectsToTransfer.length > 0) {\n\t\t\ttx.transferObjects(objectsToTransfer, address);\n\t\t}\n\n\t\ttx.add(this.#contract.finalize({ arguments: [bag, proof] }));\n\n\t\treturn tx;\n\t}\n\n\tasync createRegenerateTransaction(\n\t\tsender: string,\n\t\toptions: Omit<ZkSendLinkBuilderOptions, 'sender'> = {},\n\t) {\n\t\tif (!this.assets) {\n\t\t\tawait this.#loadBag();\n\t\t}\n\n\t\tif (this.claimed) {\n\t\t\tthrow new Error('Assets have already been claimed');\n\t\t}\n\n\t\tif (!this.#contract) {\n\t\t\tthrow new Error('Regenerating non-contract based links is not supported');\n\t\t}\n\n\t\tconst tx = new Transaction();\n\t\ttx.setSender(sender);\n\n\t\tconst store = tx.object(this.#contract.ids.bagStoreId);\n\n\t\tconst newLinkKp = Ed25519Keypair.generate();\n\n\t\tconst newLink = new ZkSendLinkBuilder({\n\t\t\t...options,\n\t\t\tsender,\n\t\t\tclient: this.#client,\n\t\t\tcontract: this.#contract.ids,\n\t\t\thost: this.#host,\n\t\t\tpath: this.#path,\n\t\t\tkeypair: newLinkKp,\n\t\t});\n\n\t\tconst to = tx.pure.address(newLinkKp.toSuiAddress());\n\n\t\ttx.add(this.#contract.update_receiver({ arguments: [store, this.address, to] }));\n\n\t\treturn {\n\t\t\turl: newLink.getLink(),\n\t\t\ttransaction: tx,\n\t\t};\n\t}\n\n\tasync #loadBagObject() {\n\t\tif (!this.#contract) {\n\t\t\tthrow new Error('Cannot load bag object for non-contract based links');\n\t\t}\n\t\tconst bagField = await this.#client.getDynamicFieldObject({\n\t\t\tparentId: this.#contract.ids.bagStoreTableId,\n\t\t\tname: {\n\t\t\t\ttype: 'address',\n\t\t\t\tvalue: this.address,\n\t\t\t},\n\t\t});\n\n\t\tthis.bagObject = bagField.data;\n\t\tthis.claimed = !bagField.data;\n\t}\n\n\tasync #loadBag({\n\t\ttransaction,\n\t\tloadAssets = true,\n\t\tloadClaimedAssets = loadAssets,\n\t}: {\n\t\ttransaction?: SuiTransactionBlockResponse;\n\t\tloadAssets?: boolean;\n\t\tloadClaimedAssets?: boolean;\n\t} = {}) {\n\t\tif (!this.#contract) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.assets = {\n\t\t\tbalances: [],\n\t\t\tnfts: [],\n\t\t\tcoins: [],\n\t\t};\n\n\t\tif (!this.bagObject || !this.claimed) {\n\t\t\tawait this.#loadBagObject();\n\t\t}\n\n\t\tif (!loadAssets) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.bagObject) {\n\t\t\tif (loadClaimedAssets) {\n\t\t\t\tawait this.#loadClaimedAssets();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tconst bagId = (this.bagObject as any).content.fields.value.fields?.id?.id;\n\n\t\tif (bagId && transaction?.balanceChanges && transaction.objectChanges) {\n\t\t\tthis.assets = getAssetsFromTransaction({\n\t\t\t\ttransaction,\n\t\t\t\taddress: bagId,\n\t\t\t\tisSent: false,\n\t\t\t});\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst itemIds: string[] | undefined = (this.bagObject as any)?.content?.fields?.value?.fields\n\t\t\t?.item_ids.fields.contents;\n\n\t\tthis.creatorAddress = (this.bagObject as any)?.content?.fields?.value?.fields?.owner;\n\n\t\tif (!itemIds) {\n\t\t\tthrow new Error('Invalid bag field');\n\t\t}\n\n\t\tconst objectsResponse = await this.#client.multiGetObjects({\n\t\t\tids: itemIds,\n\t\t\toptions: {\n\t\t\t\tshowType: true,\n\t\t\t\tshowContent: true,\n\t\t\t},\n\t\t});\n\n\t\tconst balances = new Map<\n\t\t\tstring,\n\t\t\t{\n\t\t\t\tcoinType: string;\n\t\t\t\tamount: bigint;\n\t\t\t}\n\t\t>();\n\n\t\tobjectsResponse.forEach((object, i) => {\n\t\t\tif (!object.data || !object.data.type) {\n\t\t\t\tthrow new Error(`Failed to load claimable object ${itemIds[i]}`);\n\t\t\t}\n\n\t\t\tconst type = parseStructTag(normalizeStructTag(object.data.type));\n\n\t\t\tif (\n\t\t\t\ttype.address === normalizeSuiAddress('0x2') &&\n\t\t\t\ttype.module === 'coin' &&\n\t\t\t\ttype.name === 'Coin'\n\t\t\t) {\n\t\t\t\tthis.assets!.coins.push({\n\t\t\t\t\tobjectId: object.data.objectId,\n\t\t\t\t\ttype: object.data.type,\n\t\t\t\t\tversion: object.data.version,\n\t\t\t\t\tdigest: object.data.digest,\n\t\t\t\t});\n\n\t\t\t\tif (object.data.content?.dataType === 'moveObject') {\n\t\t\t\t\tconst amount = BigInt((object.data.content.fields as Record<string, string>).balance);\n\t\t\t\t\tconst coinType = normalizeStructTag(\n\t\t\t\t\t\tparseStructTag(object.data.content.type).typeParams[0],\n\t\t\t\t\t);\n\t\t\t\t\tif (!balances.has(coinType)) {\n\t\t\t\t\t\tbalances.set(coinType, { coinType, amount });\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbalances.get(coinType)!.amount += amount;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.assets!.nfts.push({\n\t\t\t\t\tobjectId: object.data.objectId,\n\t\t\t\t\ttype: object.data.type,\n\t\t\t\t\tversion: object.data.version,\n\t\t\t\t\tdigest: object.data.digest,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tthis.assets.balances = [...balances.values()];\n\t}\n\n\tasync #loadClaimedAssets() {\n\t\tconst result = await this.#client.queryTransactionBlocks({\n\t\t\tlimit: 1,\n\t\t\tfilter: {\n\t\t\t\tFromAddress: this.address,\n\t\t\t},\n\t\t\toptions: {\n\t\t\t\tshowObjectChanges: true,\n\t\t\t\tshowBalanceChanges: true,\n\t\t\t\tshowInput: true,\n\t\t\t},\n\t\t});\n\n\t\tif (!result?.data[0]) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [tx] = result.data;\n\n\t\tif (tx.transaction?.data.transaction.kind !== 'ProgrammableTransaction') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst transfer = tx.transaction.data.transaction.transactions.findLast(\n\t\t\t(tx): tx is Extract<SuiTransaction, { TransferObjects: unknown }> => 'TransferObjects' in tx,\n\t\t);\n\n\t\tif (!transfer) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst receiverArg = transfer.TransferObjects[1];\n\n\t\tif (!(typeof receiverArg === 'object' && 'Input' in receiverArg)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst input = tx.transaction.data.transaction.inputs[receiverArg.Input];\n\n\t\tif (input.type !== 'pure') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst receiver =\n\t\t\ttypeof input.value === 'string'\n\t\t\t\t? input.value\n\t\t\t\t: bcs.Address.parse(new Uint8Array((input.value as { Pure: number[] }).Pure));\n\n\t\tthis.assets = getAssetsFromTransaction({\n\t\t\ttransaction: tx,\n\t\t\taddress: receiver,\n\t\t\tisSent: false,\n\t\t});\n\t}\n\n\tasync #createSponsoredTransaction(tx: Transaction, claimer: string, sender: string) {\n\t\treturn this.#fetch<{ digest: string; bytes: string }>('transaction-blocks/sponsor', {\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify({\n\t\t\t\tnetwork: this.#network,\n\t\t\t\tsender,\n\t\t\t\tclaimer,\n\t\t\t\ttransactionBlockKindBytes: toBase64(\n\t\t\t\t\tawait tx.build({\n\t\t\t\t\t\tonlyTransactionKind: true,\n\t\t\t\t\t\tclient: this.#client,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t}),\n\t\t});\n\t}\n\n\tasync #executeSponsoredTransaction(input: { digest: string; bytes: string }, signature: string) {\n\t\treturn this.#fetch<{ digest: string }>(`transaction-blocks/sponsor/${input.digest}`, {\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify({\n\t\t\t\tsignature,\n\t\t\t}),\n\t\t});\n\t}\n\n\tasync #fetch<T = unknown>(path: string, init: RequestInit): Promise<T> {\n\t\tconst res = await fetch(`${this.#claimApi}/v1/${path}`, {\n\t\t\t...init,\n\t\t\theaders: {\n\t\t\t\t...init.headers,\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t});\n\n\t\tif (!res.ok) {\n\t\t\tconsole.error(path, await res.text());\n\t\t\tthrow new Error(`Request to claim API failed with status code ${res.status}`);\n\t\t}\n\n\t\tconst { data } = await res.json();\n\n\t\treturn data as T;\n\t}\n\n\tasync #listNonContractClaimableAssets() {\n\t\tconst balances: {\n\t\t\tcoinType: string;\n\t\t\tamount: bigint;\n\t\t}[] = [];\n\n\t\tconst nfts: {\n\t\t\tobjectId: string;\n\t\t\ttype: string;\n\t\t\tversion: string;\n\t\t\tdigest: string;\n\t\t}[] = [];\n\n\t\tconst coins: {\n\t\t\tobjectId: string;\n\t\t\ttype: string;\n\t\t\tversion: string;\n\t\t\tdigest: string;\n\t\t}[] = [];\n\n\t\tif (this.#ownedObjects.length === 0 && !this.#hasSui) {\n\t\t\treturn {\n\t\t\t\tbalances,\n\t\t\t\tnfts,\n\t\t\t\tcoins,\n\t\t\t};\n\t\t}\n\n\t\tconst address = new Ed25519Keypair().toSuiAddress();\n\t\tconst normalizedAddress = normalizeSuiAddress(address);\n\n\t\tconst tx = this.createClaimTransaction(normalizedAddress);\n\n\t\tif (this.#gasCoin || !this.#hasSui) {\n\t\t\ttx.setGasPayment([]);\n\t\t}\n\n\t\tconst dryRun = await this.#client.dryRunTransactionBlock({\n\t\t\ttransactionBlock: await tx.build({ client: this.#client }),\n\t\t});\n\n\t\tdryRun.balanceChanges.forEach((balanceChange) => {\n\t\t\tif (BigInt(balanceChange.amount) > 0n && isOwner(balanceChange.owner, normalizedAddress)) {\n\t\t\t\tbalances.push({\n\t\t\t\t\tcoinType: normalizeStructTag(balanceChange.coinType),\n\t\t\t\t\tamount: BigInt(balanceChange.amount),\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tdryRun.objectChanges.forEach((objectChange) => {\n\t\t\tif ('objectType' in objectChange) {\n\t\t\t\tconst type = parseStructTag(objectChange.objectType);\n\n\t\t\t\tif (\n\t\t\t\t\ttype.address === normalizeSuiAddress('0x2') &&\n\t\t\t\t\ttype.module === 'coin' &&\n\t\t\t\t\ttype.name === 'Coin'\n\t\t\t\t) {\n\t\t\t\t\tif (ownedAfterChange(objectChange, normalizedAddress)) {\n\t\t\t\t\t\tcoins.push(objectChange);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (ownedAfterChange(objectChange, normalizedAddress)) {\n\t\t\t\tnfts.push(objectChange);\n\t\t\t}\n\t\t});\n\n\t\treturn {\n\t\t\tbalances,\n\t\t\tnfts,\n\t\t\tcoins,\n\t\t};\n\t}\n\n\t#createNonContractClaimTransaction(address: string) {\n\t\tif (!this.keypair) {\n\t\t\tthrow new Error('Cannot claim assets without the links keypair');\n\t\t}\n\n\t\tconst tx = new Transaction();\n\t\ttx.setSender(this.keypair.toSuiAddress());\n\n\t\tconst objectsToTransfer: TransactionObjectArgument[] = this.#ownedObjects\n\t\t\t.filter((object) => {\n\t\t\t\tif (this.#gasCoin) {\n\t\t\t\t\tif (object.objectId === this.#gasCoin.coinObjectId) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t} else if (object.type === SUI_COIN_OBJECT_TYPE) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t})\n\t\t\t.map((object) => tx.object(object.objectId));\n\n\t\tif (this.#gasCoin && this.creatorAddress) {\n\t\t\ttx.transferObjects([tx.gas], this.creatorAddress);\n\t\t} else {\n\t\t\tobjectsToTransfer.push(tx.gas);\n\t\t}\n\n\t\tif (objectsToTransfer.length > 0) {\n\t\t\ttx.transferObjects(objectsToTransfer, address);\n\t\t}\n\n\t\treturn tx;\n\t}\n\n\tasync #loadOwnedObjects({\n\t\tloadClaimedAssets = true,\n\t}: {\n\t\tloadClaimedAssets?: boolean;\n\t} = {}) {\n\t\tthis.assets = {\n\t\t\tnfts: [],\n\t\t\tbalances: [],\n\t\t\tcoins: [],\n\t\t};\n\n\t\tlet nextCursor: string | null | undefined;\n\t\tdo {\n\t\t\tconst ownedObjects = await this.#client.getOwnedObjects({\n\t\t\t\tcursor: nextCursor,\n\t\t\t\towner: this.address,\n\t\t\t\toptions: {\n\t\t\t\t\tshowType: true,\n\t\t\t\t\tshowContent: true,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\t// RPC response returns cursor even if there are no more pages\n\t\t\tnextCursor = ownedObjects.hasNextPage ? ownedObjects.nextCursor : null;\n\t\t\tfor (const object of ownedObjects.data) {\n\t\t\t\tif (object.data) {\n\t\t\t\t\tthis.#ownedObjects.push({\n\t\t\t\t\t\tobjectId: normalizeSuiObjectId(object.data.objectId),\n\t\t\t\t\t\tversion: object.data.version,\n\t\t\t\t\t\tdigest: object.data.digest,\n\t\t\t\t\t\ttype: normalizeStructTag(object.data.type!),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t} while (nextCursor);\n\n\t\tconst coins = await this.#client.getCoins({\n\t\t\tcoinType: SUI_COIN_TYPE,\n\t\t\towner: this.address,\n\t\t});\n\n\t\tthis.#hasSui = coins.data.length > 0;\n\t\tthis.#gasCoin = coins.data.find((coin) => BigInt(coin.balance) % 1000n === 987n);\n\n\t\tconst result = await this.#client.queryTransactionBlocks({\n\t\t\tlimit: 1,\n\t\t\torder: 'ascending',\n\t\t\tfilter: {\n\t\t\t\tToAddress: this.address,\n\t\t\t},\n\t\t\toptions: {\n\t\t\t\tshowInput: true,\n\t\t\t\tshowBalanceChanges: true,\n\t\t\t\tshowObjectChanges: true,\n\t\t\t},\n\t\t});\n\n\t\tthis.creatorAddress = result.data[0]?.transaction?.data.sender;\n\n\t\tif (this.#hasSui || this.#ownedObjects.length > 0) {\n\t\t\tthis.claimed = false;\n\t\t\tthis.assets = await this.#listNonContractClaimableAssets();\n\t\t} else if (result.data[0] && loadClaimedAssets) {\n\t\t\tthis.claimed = true;\n\t\t\tawait this.#loadClaimedAssets();\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["import_utils", "bytes", "signature", "tx"]
}
