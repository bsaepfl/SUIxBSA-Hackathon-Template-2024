{
  "version": 3,
  "sources": ["../../../src/links/utils.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { ObjectOwner, SuiObjectChange, SuiTransactionBlockResponse } from '@mysten/sui/client';\nimport type { Transaction } from '@mysten/sui/transactions';\nimport { normalizeStructTag, normalizeSuiAddress, parseStructTag } from '@mysten/sui/utils';\n\n// eslint-disable-next-line import/no-cycle\n\nexport interface LinkAssets {\n\tbalances: {\n\t\tcoinType: string;\n\t\tamount: bigint;\n\t}[];\n\n\tnfts: {\n\t\tobjectId: string;\n\t\ttype: string;\n\t\tversion: string;\n\t\tdigest: string;\n\t}[];\n\n\tcoins: {\n\t\tobjectId: string;\n\t\ttype: string;\n\t\tversion: string;\n\t\tdigest: string;\n\t}[];\n}\n\nexport function isClaimTransaction(\n\ttx: Transaction,\n\toptions: {\n\t\tpackageId: string;\n\t},\n) {\n\tlet transfers = 0;\n\n\tfor (const command of tx.getData().commands) {\n\t\tswitch (command.$kind) {\n\t\t\tcase 'TransferObjects':\n\t\t\t\t// Ensure that we are only transferring results of a claim\n\t\t\t\tif (\n\t\t\t\t\t!command.TransferObjects.objects.every(\n\t\t\t\t\t\t(o) => o.$kind === 'Result' || o.$kind === 'NestedResult',\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\ttransfers++;\n\t\t\t\tbreak;\n\t\t\tcase 'MoveCall':\n\t\t\t\tif (command.MoveCall.package !== options.packageId) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (command.MoveCall.module !== 'zk_bag') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tconst fn = command.MoveCall.function;\n\t\t\t\tif (fn !== 'init_claim' && fn !== 'reclaim' && fn !== 'claim' && fn !== 'finalize') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn transfers === 1;\n}\n\nexport function getAssetsFromTransaction({\n\ttransaction,\n\taddress,\n\tisSent,\n}: {\n\ttransaction: SuiTransactionBlockResponse;\n\taddress: string;\n\tisSent: boolean;\n}): LinkAssets {\n\tconst normalizedAddress = normalizeSuiAddress(address);\n\tconst balances: {\n\t\tcoinType: string;\n\t\tamount: bigint;\n\t}[] = [];\n\n\tconst nfts: {\n\t\tobjectId: string;\n\t\ttype: string;\n\t\tversion: string;\n\t\tdigest: string;\n\t}[] = [];\n\n\tconst coins: {\n\t\tobjectId: string;\n\t\ttype: string;\n\t\tversion: string;\n\t\tdigest: string;\n\t}[] = [];\n\n\ttransaction.balanceChanges?.forEach((change) => {\n\t\tconst validAmountChange = isSent ? BigInt(change.amount) < 0n : BigInt(change.amount) > 0n;\n\t\tif (validAmountChange && isOwner(change.owner, normalizedAddress)) {\n\t\t\tbalances.push({\n\t\t\t\tcoinType: normalizeStructTag(change.coinType),\n\t\t\t\tamount: BigInt(change.amount),\n\t\t\t});\n\t\t}\n\t});\n\n\ttransaction.objectChanges?.forEach((change) => {\n\t\tif (!isObjectOwner(change, normalizedAddress, isSent)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ('objectType' in change) {\n\t\t\tconst type = parseStructTag(change.objectType);\n\n\t\t\tif (\n\t\t\t\ttype.address === normalizeSuiAddress('0x2') &&\n\t\t\t\ttype.module === 'coin' &&\n\t\t\t\ttype.name === 'Coin'\n\t\t\t) {\n\t\t\t\tif (\n\t\t\t\t\tchange.type === 'created' ||\n\t\t\t\t\tchange.type === 'transferred' ||\n\t\t\t\t\tchange.type === 'mutated'\n\t\t\t\t) {\n\t\t\t\t\tcoins.push({\n\t\t\t\t\t\t...change,\n\t\t\t\t\t\ttype: change.objectType,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\tisObjectOwner(change, normalizedAddress, isSent) &&\n\t\t\t(change.type === 'created' || change.type === 'transferred' || change.type === 'mutated')\n\t\t) {\n\t\t\tnfts.push({\n\t\t\t\tobjectId: change.objectId,\n\t\t\t\ttype: change.objectType,\n\t\t\t\tversion: change.version,\n\t\t\t\tdigest: change.digest,\n\t\t\t});\n\t\t}\n\t});\n\n\treturn {\n\t\tbalances,\n\t\tnfts,\n\t\tcoins,\n\t};\n}\n\nfunction getObjectOwnerFromObjectChange(objectChange: SuiObjectChange, isSent: boolean) {\n\tif (isSent) {\n\t\treturn 'owner' in objectChange ? objectChange.owner : null;\n\t}\n\n\treturn 'recipient' in objectChange ? objectChange.recipient : null;\n}\n\nfunction isObjectOwner(objectChange: SuiObjectChange, address: string, isSent: boolean) {\n\tconst owner = getObjectOwnerFromObjectChange(objectChange, isSent);\n\n\tif (isSent) {\n\t\treturn owner && typeof owner === 'object' && 'AddressOwner' in owner;\n\t}\n\n\treturn ownedAfterChange(objectChange, address);\n}\n\nexport function ownedAfterChange(\n\tobjectChange: SuiObjectChange,\n\taddress: string,\n): objectChange is Extract<SuiObjectChange, { type: 'created' | 'transferred' | 'mutated' }> {\n\tif (objectChange.type === 'transferred' && isOwner(objectChange.recipient, address)) {\n\t\treturn true;\n\t}\n\n\tif (\n\t\t(objectChange.type === 'created' || objectChange.type === 'mutated') &&\n\t\tisOwner(objectChange.owner, address)\n\t) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nexport function isOwner(owner: ObjectOwner, address: string): owner is { AddressOwner: string } {\n\treturn (\n\t\towner &&\n\t\ttypeof owner === 'object' &&\n\t\t'AddressOwner' in owner &&\n\t\tnormalizeSuiAddress(owner.AddressOwner) === address\n\t);\n}\n"],
  "mappings": "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",
  "names": []
}
