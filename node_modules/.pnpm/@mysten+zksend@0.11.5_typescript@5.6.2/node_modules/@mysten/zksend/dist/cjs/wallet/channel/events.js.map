{
  "version": 3,
  "sources": ["../../../../src/wallet/channel/events.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { InferOutput } from 'valibot';\nimport { literal, object, optional, pipe, string, url, uuid, variant } from 'valibot';\n\nexport const StashedRequestData = variant('type', [\n\tobject({\n\t\ttype: literal('connect'),\n\t}),\n\tobject({\n\t\ttype: literal('sign-transaction-block'),\n\t\tdata: string('`data` is required'),\n\t\taddress: string('`address` is required'),\n\t}),\n\tobject({\n\t\ttype: literal('sign-personal-message'),\n\t\tbytes: string('`bytes` is required'),\n\t\taddress: string('`address` is required'),\n\t}),\n]);\nexport type StashedRequestData = InferOutput<typeof StashedRequestData>;\n\nexport const StashedRequest = object({\n\tid: pipe(string('`id` is required'), uuid()),\n\torigin: pipe(string(), url('`origin` must be a valid URL')),\n\tname: optional(string()),\n\tpayload: StashedRequestData,\n});\n\nexport type StashedRequest = InferOutput<typeof StashedRequest>;\n\nexport const StashedResponseData = variant('type', [\n\tobject({\n\t\ttype: literal('connect'),\n\t\taddress: string(),\n\t}),\n\tobject({\n\t\ttype: literal('sign-transaction-block'),\n\t\tbytes: string(),\n\t\tsignature: string(),\n\t}),\n\tobject({\n\t\ttype: literal('sign-personal-message'),\n\t\tbytes: string(),\n\t\tsignature: string(),\n\t}),\n]);\nexport type StashedResponseData = InferOutput<typeof StashedResponseData>;\n\nexport const StashedResponsePayload = variant('type', [\n\tobject({\n\t\ttype: literal('reject'),\n\t}),\n\tobject({\n\t\ttype: literal('resolve'),\n\t\tdata: StashedResponseData,\n\t}),\n]);\nexport type StashedResponsePayload = InferOutput<typeof StashedResponsePayload>;\n\nexport const StashedResponse = object({\n\tid: pipe(string(), uuid()),\n\tsource: literal('zksend-channel'),\n\tpayload: StashedResponsePayload,\n});\nexport type StashedResponse = InferOutput<typeof StashedResponse>;\n\nexport type StashedRequestTypes = Record<string, any> & {\n\t[P in StashedRequestData as P['type']]: P;\n};\n\nexport type StashedResponseTypes = {\n\t[P in StashedResponseData as P['type']]: P;\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,qBAA4E;AAErE,MAAM,yBAAqB,wBAAQ,QAAQ;AAAA,MACjD,uBAAO;AAAA,IACN,UAAM,wBAAQ,SAAS;AAAA,EACxB,CAAC;AAAA,MACD,uBAAO;AAAA,IACN,UAAM,wBAAQ,wBAAwB;AAAA,IACtC,UAAM,uBAAO,oBAAoB;AAAA,IACjC,aAAS,uBAAO,uBAAuB;AAAA,EACxC,CAAC;AAAA,MACD,uBAAO;AAAA,IACN,UAAM,wBAAQ,uBAAuB;AAAA,IACrC,WAAO,uBAAO,qBAAqB;AAAA,IACnC,aAAS,uBAAO,uBAAuB;AAAA,EACxC,CAAC;AACF,CAAC;AAGM,MAAM,qBAAiB,uBAAO;AAAA,EACpC,QAAI,yBAAK,uBAAO,kBAAkB,OAAG,qBAAK,CAAC;AAAA,EAC3C,YAAQ,yBAAK,uBAAO,OAAG,oBAAI,8BAA8B,CAAC;AAAA,EAC1D,UAAM,6BAAS,uBAAO,CAAC;AAAA,EACvB,SAAS;AACV,CAAC;AAIM,MAAM,0BAAsB,wBAAQ,QAAQ;AAAA,MAClD,uBAAO;AAAA,IACN,UAAM,wBAAQ,SAAS;AAAA,IACvB,aAAS,uBAAO;AAAA,EACjB,CAAC;AAAA,MACD,uBAAO;AAAA,IACN,UAAM,wBAAQ,wBAAwB;AAAA,IACtC,WAAO,uBAAO;AAAA,IACd,eAAW,uBAAO;AAAA,EACnB,CAAC;AAAA,MACD,uBAAO;AAAA,IACN,UAAM,wBAAQ,uBAAuB;AAAA,IACrC,WAAO,uBAAO;AAAA,IACd,eAAW,uBAAO;AAAA,EACnB,CAAC;AACF,CAAC;AAGM,MAAM,6BAAyB,wBAAQ,QAAQ;AAAA,MACrD,uBAAO;AAAA,IACN,UAAM,wBAAQ,QAAQ;AAAA,EACvB,CAAC;AAAA,MACD,uBAAO;AAAA,IACN,UAAM,wBAAQ,SAAS;AAAA,IACvB,MAAM;AAAA,EACP,CAAC;AACF,CAAC;AAGM,MAAM,sBAAkB,uBAAO;AAAA,EACrC,QAAI,yBAAK,uBAAO,OAAG,qBAAK,CAAC;AAAA,EACzB,YAAQ,wBAAQ,gBAAgB;AAAA,EAChC,SAAS;AACV,CAAC;",
  "names": []
}
