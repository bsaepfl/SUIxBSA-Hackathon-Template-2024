{
  "version": 3,
  "sources": ["../../../src/links/list-created-links.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs } from '@mysten/sui/bcs';\nimport type { SuiClient } from '@mysten/sui/client';\nimport { SuiGraphQLClient } from '@mysten/sui/graphql';\nimport { graphql } from '@mysten/sui/graphql/schemas/2024.4';\nimport { fromBase64, normalizeSuiAddress } from '@mysten/sui/utils';\n\nimport { ZkSendLink } from './claim.js';\nimport type { ZkBagContractOptions } from './zk-bag.js';\nimport { getContractIds } from './zk-bag.js';\n\nconst ListCreatedLinksQuery = graphql(`\n\tquery listCreatedLinks($address: SuiAddress!, $function: String!, $cursor: String) {\n\t\ttransactionBlocks(\n\t\t\tlast: 10\n\t\t\tbefore: $cursor\n\t\t\tfilter: { signAddress: $address, function: $function, kind: PROGRAMMABLE_TX }\n\t\t) {\n\t\t\tpageInfo {\n\t\t\t\tstartCursor\n\t\t\t\thasPreviousPage\n\t\t\t}\n\t\t\tnodes {\n\t\t\t\teffects {\n\t\t\t\t\ttimestamp\n\t\t\t\t}\n\t\t\t\tdigest\n\t\t\t\tbcs\n\t\t\t}\n\t\t}\n\t}\n`);\n\nexport async function listCreatedLinks({\n\taddress,\n\tcursor,\n\tnetwork,\n\tcontract = getContractIds(network),\n\tfetch: fetchFn,\n\t...linkOptions\n}: {\n\taddress: string;\n\tcontract?: ZkBagContractOptions;\n\tcursor?: string;\n\tnetwork?: 'mainnet' | 'testnet';\n\n\t// Link options:\n\thost?: string;\n\tpath?: string;\n\tclaimApi?: string;\n\tclient?: SuiClient;\n\tfetch?: typeof fetch;\n}) {\n\tconst gqlClient = new SuiGraphQLClient({\n\t\turl:\n\t\t\tnetwork === 'testnet'\n\t\t\t\t? 'https://sui-testnet.mystenlabs.com/graphql'\n\t\t\t\t: 'https://sui-mainnet.mystenlabs.com/graphql',\n\t\tfetch: fetchFn,\n\t});\n\n\tconst packageId = normalizeSuiAddress(contract.packageId);\n\n\tconst page = await gqlClient.query({\n\t\tquery: ListCreatedLinksQuery,\n\t\tvariables: {\n\t\t\taddress,\n\t\t\tcursor,\n\t\t\tfunction: `${packageId}::zk_bag::new`,\n\t\t},\n\t});\n\n\tconst transactionBlocks = page.data?.transactionBlocks;\n\n\tif (!transactionBlocks || page.errors?.length) {\n\t\tthrow new Error('Failed to load created links');\n\t}\n\n\tconst links = (\n\t\tawait Promise.all(\n\t\t\ttransactionBlocks.nodes.map(async (node) => {\n\t\t\t\tif (!node.bcs) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tconst kind = bcs.SenderSignedData.parse(fromBase64(node.bcs))?.[0]?.intentMessage.value.V1\n\t\t\t\t\t.kind;\n\n\t\t\t\tif (!kind.ProgrammableTransaction) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tconst { inputs, commands } = kind.ProgrammableTransaction;\n\n\t\t\t\tconst fn = commands.find(\n\t\t\t\t\t(command) =>\n\t\t\t\t\t\tcommand.MoveCall?.package === packageId &&\n\t\t\t\t\t\tcommand.MoveCall.module === 'zk_bag' &&\n\t\t\t\t\t\tcommand.MoveCall.function === 'new',\n\t\t\t\t);\n\n\t\t\t\tif (!fn?.MoveCall) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tconst addressArg = fn.MoveCall.arguments[1];\n\n\t\t\t\tif (addressArg.$kind !== 'Input') {\n\t\t\t\t\tthrow new Error('Invalid address argument');\n\t\t\t\t}\n\n\t\t\t\tconst input = inputs[addressArg.Input];\n\n\t\t\t\tif (!input.Pure) {\n\t\t\t\t\tthrow new Error('Expected Address input to be a Pure value');\n\t\t\t\t}\n\n\t\t\t\tconst address = bcs.Address.fromBase64(input.Pure.bytes);\n\n\t\t\t\tconst link = new ZkSendLink({\n\t\t\t\t\tnetwork,\n\t\t\t\t\taddress,\n\t\t\t\t\tcontract,\n\t\t\t\t\tisContractLink: true,\n\t\t\t\t\t...linkOptions,\n\t\t\t\t});\n\n\t\t\t\tawait link.loadAssets();\n\n\t\t\t\treturn {\n\t\t\t\t\tlink,\n\t\t\t\t\tclaimed: !!link.claimed,\n\t\t\t\t\tassets: link.assets!,\n\t\t\t\t\tdigest: node.digest,\n\t\t\t\t\tcreatedAt: node.effects?.timestamp!,\n\t\t\t\t};\n\t\t\t}),\n\t\t)\n\t).reverse();\n\n\treturn {\n\t\tcursor: transactionBlocks.pageInfo.startCursor,\n\t\thasNextPage: transactionBlocks.pageInfo.hasPreviousPage,\n\t\tlinks: links.filter((link): link is NonNullable<typeof link> => link !== null),\n\t};\n}\n"],
  "mappings": "AAGA,SAAS,WAAW;AAEpB,SAAS,wBAAwB;AACjC,SAAS,eAAe;AACxB,SAAS,YAAY,2BAA2B;AAEhD,SAAS,kBAAkB;AAE3B,SAAS,sBAAsB;AAE/B,MAAM,wBAAwB,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAoBrC;AAED,eAAsB,iBAAiB;AAAA,EACtC;AAAA,EACA;AAAA,EACA;AAAA,EACA,WAAW,eAAe,OAAO;AAAA,EACjC,OAAO;AAAA,EACP,GAAG;AACJ,GAYG;AACF,QAAM,YAAY,IAAI,iBAAiB;AAAA,IACtC,KACC,YAAY,YACT,+CACA;AAAA,IACJ,OAAO;AAAA,EACR,CAAC;AAED,QAAM,YAAY,oBAAoB,SAAS,SAAS;AAExD,QAAM,OAAO,MAAM,UAAU,MAAM;AAAA,IAClC,OAAO;AAAA,IACP,WAAW;AAAA,MACV;AAAA,MACA;AAAA,MACA,UAAU,GAAG,SAAS;AAAA,IACvB;AAAA,EACD,CAAC;AAED,QAAM,oBAAoB,KAAK,MAAM;AAErC,MAAI,CAAC,qBAAqB,KAAK,QAAQ,QAAQ;AAC9C,UAAM,IAAI,MAAM,8BAA8B;AAAA,EAC/C;AAEA,QAAM,SACL,MAAM,QAAQ;AAAA,IACb,kBAAkB,MAAM,IAAI,OAAO,SAAS;AAC3C,UAAI,CAAC,KAAK,KAAK;AACd,eAAO;AAAA,MACR;AAEA,YAAM,OAAO,IAAI,iBAAiB,MAAM,WAAW,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,cAAc,MAAM,GACtF;AAEF,UAAI,CAAC,KAAK,yBAAyB;AAClC,eAAO;AAAA,MACR;AAEA,YAAM,EAAE,QAAQ,SAAS,IAAI,KAAK;AAElC,YAAM,KAAK,SAAS;AAAA,QACnB,CAAC,YACA,QAAQ,UAAU,YAAY,aAC9B,QAAQ,SAAS,WAAW,YAC5B,QAAQ,SAAS,aAAa;AAAA,MAChC;AAEA,UAAI,CAAC,IAAI,UAAU;AAClB,eAAO;AAAA,MACR;AAEA,YAAM,aAAa,GAAG,SAAS,UAAU,CAAC;AAE1C,UAAI,WAAW,UAAU,SAAS;AACjC,cAAM,IAAI,MAAM,0BAA0B;AAAA,MAC3C;AAEA,YAAM,QAAQ,OAAO,WAAW,KAAK;AAErC,UAAI,CAAC,MAAM,MAAM;AAChB,cAAM,IAAI,MAAM,2CAA2C;AAAA,MAC5D;AAEA,YAAMA,WAAU,IAAI,QAAQ,WAAW,MAAM,KAAK,KAAK;AAEvD,YAAM,OAAO,IAAI,WAAW;AAAA,QAC3B;AAAA,QACA,SAAAA;AAAA,QACA;AAAA,QACA,gBAAgB;AAAA,QAChB,GAAG;AAAA,MACJ,CAAC;AAED,YAAM,KAAK,WAAW;AAEtB,aAAO;AAAA,QACN;AAAA,QACA,SAAS,CAAC,CAAC,KAAK;AAAA,QAChB,QAAQ,KAAK;AAAA,QACb,QAAQ,KAAK;AAAA,QACb,WAAW,KAAK,SAAS;AAAA,MAC1B;AAAA,IACD,CAAC;AAAA,EACF,GACC,QAAQ;AAEV,SAAO;AAAA,IACN,QAAQ,kBAAkB,SAAS;AAAA,IACnC,aAAa,kBAAkB,SAAS;AAAA,IACxC,OAAO,MAAM,OAAO,CAAC,SAA2C,SAAS,IAAI;AAAA,EAC9E;AACD;",
  "names": ["address"]
}
