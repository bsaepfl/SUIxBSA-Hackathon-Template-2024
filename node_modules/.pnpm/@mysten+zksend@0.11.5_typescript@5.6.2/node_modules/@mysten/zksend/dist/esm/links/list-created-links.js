import { bcs } from "@mysten/sui/bcs";
import { SuiGraphQLClient } from "@mysten/sui/graphql";
import { graphql } from "@mysten/sui/graphql/schemas/2024.4";
import { fromBase64, normalizeSuiAddress } from "@mysten/sui/utils";
import { ZkSendLink } from "./claim.js";
import { getContractIds } from "./zk-bag.js";
const ListCreatedLinksQuery = graphql(`
	query listCreatedLinks($address: SuiAddress!, $function: String!, $cursor: String) {
		transactionBlocks(
			last: 10
			before: $cursor
			filter: { signAddress: $address, function: $function, kind: PROGRAMMABLE_TX }
		) {
			pageInfo {
				startCursor
				hasPreviousPage
			}
			nodes {
				effects {
					timestamp
				}
				digest
				bcs
			}
		}
	}
`);
async function listCreatedLinks({
  address,
  cursor,
  network,
  contract = getContractIds(network),
  fetch: fetchFn,
  ...linkOptions
}) {
  const gqlClient = new SuiGraphQLClient({
    url: network === "testnet" ? "https://sui-testnet.mystenlabs.com/graphql" : "https://sui-mainnet.mystenlabs.com/graphql",
    fetch: fetchFn
  });
  const packageId = normalizeSuiAddress(contract.packageId);
  const page = await gqlClient.query({
    query: ListCreatedLinksQuery,
    variables: {
      address,
      cursor,
      function: `${packageId}::zk_bag::new`
    }
  });
  const transactionBlocks = page.data?.transactionBlocks;
  if (!transactionBlocks || page.errors?.length) {
    throw new Error("Failed to load created links");
  }
  const links = (await Promise.all(
    transactionBlocks.nodes.map(async (node) => {
      if (!node.bcs) {
        return null;
      }
      const kind = bcs.SenderSignedData.parse(fromBase64(node.bcs))?.[0]?.intentMessage.value.V1.kind;
      if (!kind.ProgrammableTransaction) {
        return null;
      }
      const { inputs, commands } = kind.ProgrammableTransaction;
      const fn = commands.find(
        (command) => command.MoveCall?.package === packageId && command.MoveCall.module === "zk_bag" && command.MoveCall.function === "new"
      );
      if (!fn?.MoveCall) {
        return null;
      }
      const addressArg = fn.MoveCall.arguments[1];
      if (addressArg.$kind !== "Input") {
        throw new Error("Invalid address argument");
      }
      const input = inputs[addressArg.Input];
      if (!input.Pure) {
        throw new Error("Expected Address input to be a Pure value");
      }
      const address2 = bcs.Address.fromBase64(input.Pure.bytes);
      const link = new ZkSendLink({
        network,
        address: address2,
        contract,
        isContractLink: true,
        ...linkOptions
      });
      await link.loadAssets();
      return {
        link,
        claimed: !!link.claimed,
        assets: link.assets,
        digest: node.digest,
        createdAt: node.effects?.timestamp
      };
    })
  )).reverse();
  return {
    cursor: transactionBlocks.pageInfo.startCursor,
    hasNextPage: transactionBlocks.pageInfo.hasPreviousPage,
    links: links.filter((link) => link !== null)
  };
}
export {
  listCreatedLinks
};
//# sourceMappingURL=list-created-links.js.map
