{
  "version": 3,
  "sources": ["../../../../src/wallet/channel/events.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { InferOutput } from 'valibot';\nimport { literal, object, optional, pipe, string, url, uuid, variant } from 'valibot';\n\nexport const StashedRequestData = variant('type', [\n\tobject({\n\t\ttype: literal('connect'),\n\t}),\n\tobject({\n\t\ttype: literal('sign-transaction-block'),\n\t\tdata: string('`data` is required'),\n\t\taddress: string('`address` is required'),\n\t}),\n\tobject({\n\t\ttype: literal('sign-personal-message'),\n\t\tbytes: string('`bytes` is required'),\n\t\taddress: string('`address` is required'),\n\t}),\n]);\nexport type StashedRequestData = InferOutput<typeof StashedRequestData>;\n\nexport const StashedRequest = object({\n\tid: pipe(string('`id` is required'), uuid()),\n\torigin: pipe(string(), url('`origin` must be a valid URL')),\n\tname: optional(string()),\n\tpayload: StashedRequestData,\n});\n\nexport type StashedRequest = InferOutput<typeof StashedRequest>;\n\nexport const StashedResponseData = variant('type', [\n\tobject({\n\t\ttype: literal('connect'),\n\t\taddress: string(),\n\t}),\n\tobject({\n\t\ttype: literal('sign-transaction-block'),\n\t\tbytes: string(),\n\t\tsignature: string(),\n\t}),\n\tobject({\n\t\ttype: literal('sign-personal-message'),\n\t\tbytes: string(),\n\t\tsignature: string(),\n\t}),\n]);\nexport type StashedResponseData = InferOutput<typeof StashedResponseData>;\n\nexport const StashedResponsePayload = variant('type', [\n\tobject({\n\t\ttype: literal('reject'),\n\t}),\n\tobject({\n\t\ttype: literal('resolve'),\n\t\tdata: StashedResponseData,\n\t}),\n]);\nexport type StashedResponsePayload = InferOutput<typeof StashedResponsePayload>;\n\nexport const StashedResponse = object({\n\tid: pipe(string(), uuid()),\n\tsource: literal('zksend-channel'),\n\tpayload: StashedResponsePayload,\n});\nexport type StashedResponse = InferOutput<typeof StashedResponse>;\n\nexport type StashedRequestTypes = Record<string, any> & {\n\t[P in StashedRequestData as P['type']]: P;\n};\n\nexport type StashedResponseTypes = {\n\t[P in StashedResponseData as P['type']]: P;\n};\n"],
  "mappings": "AAIA,SAAS,SAAS,QAAQ,UAAU,MAAM,QAAQ,KAAK,MAAM,eAAe;AAErE,MAAM,qBAAqB,QAAQ,QAAQ;AAAA,EACjD,OAAO;AAAA,IACN,MAAM,QAAQ,SAAS;AAAA,EACxB,CAAC;AAAA,EACD,OAAO;AAAA,IACN,MAAM,QAAQ,wBAAwB;AAAA,IACtC,MAAM,OAAO,oBAAoB;AAAA,IACjC,SAAS,OAAO,uBAAuB;AAAA,EACxC,CAAC;AAAA,EACD,OAAO;AAAA,IACN,MAAM,QAAQ,uBAAuB;AAAA,IACrC,OAAO,OAAO,qBAAqB;AAAA,IACnC,SAAS,OAAO,uBAAuB;AAAA,EACxC,CAAC;AACF,CAAC;AAGM,MAAM,iBAAiB,OAAO;AAAA,EACpC,IAAI,KAAK,OAAO,kBAAkB,GAAG,KAAK,CAAC;AAAA,EAC3C,QAAQ,KAAK,OAAO,GAAG,IAAI,8BAA8B,CAAC;AAAA,EAC1D,MAAM,SAAS,OAAO,CAAC;AAAA,EACvB,SAAS;AACV,CAAC;AAIM,MAAM,sBAAsB,QAAQ,QAAQ;AAAA,EAClD,OAAO;AAAA,IACN,MAAM,QAAQ,SAAS;AAAA,IACvB,SAAS,OAAO;AAAA,EACjB,CAAC;AAAA,EACD,OAAO;AAAA,IACN,MAAM,QAAQ,wBAAwB;AAAA,IACtC,OAAO,OAAO;AAAA,IACd,WAAW,OAAO;AAAA,EACnB,CAAC;AAAA,EACD,OAAO;AAAA,IACN,MAAM,QAAQ,uBAAuB;AAAA,IACrC,OAAO,OAAO;AAAA,IACd,WAAW,OAAO;AAAA,EACnB,CAAC;AACF,CAAC;AAGM,MAAM,yBAAyB,QAAQ,QAAQ;AAAA,EACrD,OAAO;AAAA,IACN,MAAM,QAAQ,QAAQ;AAAA,EACvB,CAAC;AAAA,EACD,OAAO;AAAA,IACN,MAAM,QAAQ,SAAS;AAAA,IACvB,MAAM;AAAA,EACP,CAAC;AACF,CAAC;AAGM,MAAM,kBAAkB,OAAO;AAAA,EACrC,IAAI,KAAK,OAAO,GAAG,KAAK,CAAC;AAAA,EACzB,QAAQ,QAAQ,gBAAgB;AAAA,EAChC,SAAS;AACV,CAAC;",
  "names": []
}
