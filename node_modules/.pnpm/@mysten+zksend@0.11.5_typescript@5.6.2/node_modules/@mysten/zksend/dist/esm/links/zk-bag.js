var __typeError = (msg) => {
  throw TypeError(msg);
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var _package, _module;
const TESTNET_CONTRACT_IDS = {
  packageId: "0x036fee67274d0d85c3532f58296abe0dee86b93864f1b2b9074be6adb388f138",
  bagStoreId: "0x5c63e71734c82c48a3cb9124c54001d1a09736cfb1668b3b30cd92a96dd4d0ce",
  bagStoreTableId: "0x4e1bc4085d64005e03eb4eab2510d527aeba9548cda431cb8f149ff37451f870"
};
const MAINNET_CONTRACT_IDS = {
  packageId: "0x5bb7d0bb3240011336ca9015f553b2646302a4f05f821160344e9ec5a988f740",
  bagStoreId: "0x65b215a3f2a951c94313a89c43f0adbd2fd9ea78a0badf81e27d1c9868a8b6fe",
  bagStoreTableId: "0x616db54ca564660cd58e36a4548be68b289371ef2611485c62c374a60960084e"
};
function getContractIds(network) {
  if (!network) {
    return MAINNET_CONTRACT_IDS;
  }
  return network === "mainnet" ? MAINNET_CONTRACT_IDS : TESTNET_CONTRACT_IDS;
}
class ZkBag {
  constructor(packageAddress, ids) {
    __privateAdd(this, _package);
    __privateAdd(this, _module, "zk_bag");
    __privateSet(this, _package, packageAddress);
    this.ids = ids;
  }
  new({
    arguments: [store, receiver]
  }) {
    return (tx) => {
      tx.moveCall({
        target: `${__privateGet(this, _package)}::${__privateGet(this, _module)}::new`,
        arguments: [
          tx.object(store),
          typeof receiver === "string" ? tx.pure.address(receiver) : receiver
        ]
      });
    };
  }
  add({
    arguments: [store, receiver, item],
    typeArguments
  }) {
    return (tx) => tx.moveCall({
      target: `${__privateGet(this, _package)}::${__privateGet(this, _module)}::add`,
      arguments: [
        tx.object(store),
        typeof receiver === "string" ? tx.pure.address(receiver) : receiver,
        tx.object(item)
      ],
      typeArguments
    });
  }
  init_claim({ arguments: [store] }) {
    return (tx) => {
      const [bag, claimProof] = tx.moveCall({
        target: `${__privateGet(this, _package)}::${__privateGet(this, _module)}::init_claim`,
        arguments: [tx.object(store)]
      });
      return [bag, claimProof];
    };
  }
  reclaim({
    arguments: [store, receiver]
  }) {
    return (tx) => {
      const [bag, claimProof] = tx.moveCall({
        target: `${__privateGet(this, _package)}::${__privateGet(this, _module)}::reclaim`,
        arguments: [
          tx.object(store),
          typeof receiver === "string" ? tx.pure.address(receiver) : receiver
        ]
      });
      return [bag, claimProof];
    };
  }
  claim({
    arguments: [bag, claim, id],
    typeArguments
  }) {
    return (tx) => tx.moveCall({
      target: `${__privateGet(this, _package)}::${__privateGet(this, _module)}::claim`,
      arguments: [tx.object(bag), tx.object(claim), typeof id === "string" ? tx.object(id) : id],
      typeArguments
    });
  }
  finalize({
    arguments: [bag, claim]
  }) {
    return (tx) => {
      tx.moveCall({
        target: `${__privateGet(this, _package)}::${__privateGet(this, _module)}::finalize`,
        arguments: [tx.object(bag), tx.object(claim)]
      });
    };
  }
  update_receiver({
    arguments: [bag, from, to]
  }) {
    return (tx) => {
      tx.moveCall({
        target: `${__privateGet(this, _package)}::${__privateGet(this, _module)}::update_receiver`,
        arguments: [
          tx.object(bag),
          typeof from === "string" ? tx.pure.address(from) : from,
          typeof to === "string" ? tx.pure.address(to) : to
        ]
      });
    };
  }
}
_package = new WeakMap();
_module = new WeakMap();
export {
  MAINNET_CONTRACT_IDS,
  TESTNET_CONTRACT_IDS,
  ZkBag,
  getContractIds
};
//# sourceMappingURL=zk-bag.js.map
