{
  "version": 3,
  "sources": ["../../../src/links/builder.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\nimport type { CoinStruct } from '@mysten/sui/client';\nimport { decodeSuiPrivateKey } from '@mysten/sui/cryptography';\nimport type { Keypair, Signer } from '@mysten/sui/cryptography';\nimport { Ed25519Keypair } from '@mysten/sui/keypairs/ed25519';\nimport type { TransactionObjectArgument, TransactionObjectInput } from '@mysten/sui/transactions';\nimport { Transaction } from '@mysten/sui/transactions';\nimport { normalizeStructTag, normalizeSuiAddress, SUI_TYPE_ARG, toBase64 } from '@mysten/sui/utils';\n\nimport type { ZkBagContractOptions } from './zk-bag.js';\nimport { getContractIds, ZkBag } from './zk-bag.js';\n\ninterface ZkSendLinkRedirect {\n\turl: string;\n\tname?: string;\n}\n\nexport interface ZkSendLinkBuilderOptions {\n\thost?: string;\n\tpath?: string;\n\tkeypair?: Keypair;\n\tnetwork?: 'mainnet' | 'testnet';\n\tclient?: SuiClient;\n\tsender: string;\n\tredirect?: ZkSendLinkRedirect;\n\tcontract?: ZkBagContractOptions | null;\n}\n\nconst DEFAULT_ZK_SEND_LINK_OPTIONS = {\n\thost: 'https://zksend.com',\n\tpath: '/claim',\n\tnetwork: 'mainnet' as const,\n};\n\nconst SUI_COIN_TYPE = normalizeStructTag(SUI_TYPE_ARG);\n\nexport interface CreateZkSendLinkOptions {\n\ttransaction?: Transaction;\n\tcalculateGas?: (options: {\n\t\tbalances: Map<string, bigint>;\n\t\tobjects: TransactionObjectInput[];\n\t\tgasEstimateFromDryRun: bigint;\n\t}) => Promise<bigint> | bigint;\n}\n\nexport class ZkSendLinkBuilder {\n\tobjectIds = new Set<string>();\n\tobjectRefs: {\n\t\tref: TransactionObjectArgument;\n\t\ttype: string;\n\t}[] = [];\n\tbalances = new Map<string, bigint>();\n\tsender: string;\n\tnetwork: 'mainnet' | 'testnet';\n\t#host: string;\n\t#path: string;\n\tkeypair: Keypair;\n\t#client: SuiClient;\n\t#redirect?: ZkSendLinkRedirect;\n\t#coinsByType = new Map<string, CoinStruct[]>();\n\t#contract?: ZkBag<ZkBagContractOptions>;\n\n\tconstructor({\n\t\thost = DEFAULT_ZK_SEND_LINK_OPTIONS.host,\n\t\tpath = DEFAULT_ZK_SEND_LINK_OPTIONS.path,\n\t\tkeypair = new Ed25519Keypair(),\n\t\tnetwork = DEFAULT_ZK_SEND_LINK_OPTIONS.network,\n\t\tclient = new SuiClient({ url: getFullnodeUrl(network) }),\n\t\tsender,\n\t\tredirect,\n\t\tcontract = getContractIds(network),\n\t}: ZkSendLinkBuilderOptions) {\n\t\tthis.#host = host;\n\t\tthis.#path = path;\n\t\tthis.#redirect = redirect;\n\t\tthis.keypair = keypair;\n\t\tthis.#client = client;\n\t\tthis.sender = normalizeSuiAddress(sender);\n\t\tthis.network = network;\n\n\t\tif (contract) {\n\t\t\tthis.#contract = new ZkBag(contract.packageId, contract);\n\t\t}\n\t}\n\n\taddClaimableMist(amount: bigint) {\n\t\tthis.addClaimableBalance(SUI_COIN_TYPE, amount);\n\t}\n\n\taddClaimableBalance(coinType: string, amount: bigint) {\n\t\tconst normalizedType = normalizeStructTag(coinType);\n\t\tthis.balances.set(normalizedType, (this.balances.get(normalizedType) ?? 0n) + amount);\n\t}\n\n\taddClaimableObject(id: string) {\n\t\tthis.objectIds.add(id);\n\t}\n\n\taddClaimableObjectRef(ref: TransactionObjectArgument, type: string) {\n\t\tthis.objectRefs.push({ ref, type });\n\t}\n\n\tgetLink(): string {\n\t\tconst link = new URL(this.#host);\n\t\tlink.pathname = this.#path;\n\t\tlink.hash = `${this.#contract ? '$' : ''}${toBase64(\n\t\t\tdecodeSuiPrivateKey(this.keypair.getSecretKey()).secretKey,\n\t\t)}`;\n\n\t\tif (this.network !== 'mainnet') {\n\t\t\tlink.searchParams.set('network', this.network);\n\t\t}\n\n\t\tif (this.#redirect) {\n\t\t\tlink.searchParams.set('redirect_url', this.#redirect.url);\n\t\t\tif (this.#redirect.name) {\n\t\t\t\tlink.searchParams.set('name', this.#redirect.name);\n\t\t\t}\n\t\t}\n\n\t\treturn link.toString();\n\t}\n\n\tasync create({\n\t\tsigner,\n\t\t...options\n\t}: CreateZkSendLinkOptions & {\n\t\tsigner: Signer;\n\t\twaitForTransaction?: boolean;\n\t}) {\n\t\tconst tx = await this.createSendTransaction(options);\n\n\t\tconst result = await this.#client.signAndExecuteTransaction({\n\t\t\ttransaction: await tx.build({ client: this.#client }),\n\t\t\tsigner,\n\t\t\toptions: {\n\t\t\t\tshowEffects: true,\n\t\t\t},\n\t\t});\n\n\t\tif (result.effects?.status.status !== 'success') {\n\t\t\tthrow new Error(`Transaction failed: ${result.effects?.status.error ?? 'Unknown error'}`);\n\t\t}\n\n\t\tif (options.waitForTransaction) {\n\t\t\tawait this.#client.waitForTransaction({ digest: result.digest });\n\t\t}\n\n\t\treturn result;\n\t}\n\tasync createSendTransaction({\n\t\ttransaction = new Transaction(),\n\t\tcalculateGas,\n\t}: CreateZkSendLinkOptions = {}) {\n\t\tif (!this.#contract) {\n\t\t\treturn this.#createSendTransactionWithoutContract({ transaction, calculateGas });\n\t\t}\n\n\t\ttransaction.setSenderIfNotSet(this.sender);\n\n\t\treturn ZkSendLinkBuilder.createLinks({\n\t\t\ttransaction,\n\t\t\tclient: this.#client,\n\t\t\tcontract: this.#contract.ids,\n\t\t\tlinks: [this],\n\t\t});\n\t}\n\n\tasync createSendToAddressTransaction({\n\t\ttransaction = new Transaction(),\n\t\taddress,\n\t}: CreateZkSendLinkOptions & {\n\t\taddress: string;\n\t}) {\n\t\tconst objectsToTransfer = (await this.#objectsToTransfer(transaction)).map((obj) => obj.ref);\n\n\t\ttransaction.setSenderIfNotSet(this.sender);\n\t\ttransaction.transferObjects(objectsToTransfer, address);\n\n\t\treturn transaction;\n\t}\n\n\tasync #objectsToTransfer(tx: Transaction) {\n\t\tconst objectIDs = [...this.objectIds];\n\t\tconst refsWithType = this.objectRefs.concat(\n\t\t\t(objectIDs.length > 0\n\t\t\t\t? await this.#client.multiGetObjects({\n\t\t\t\t\t\tids: objectIDs,\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\tshowType: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t: []\n\t\t\t).map((res, i) => {\n\t\t\t\tif (!res.data || res.error) {\n\t\t\t\t\tthrow new Error(`Failed to load object ${objectIDs[i]} (${res.error?.code})`);\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tref: tx.objectRef({\n\t\t\t\t\t\tversion: res.data.version,\n\t\t\t\t\t\tdigest: res.data.digest,\n\t\t\t\t\t\tobjectId: res.data.objectId,\n\t\t\t\t\t}),\n\t\t\t\t\ttype: res.data.type!,\n\t\t\t\t};\n\t\t\t}),\n\t\t);\n\n\t\tfor (const [coinType, amount] of this.balances) {\n\t\t\tif (coinType === SUI_COIN_TYPE) {\n\t\t\t\tconst [sui] = tx.splitCoins(tx.gas, [amount]);\n\t\t\t\trefsWithType.push({\n\t\t\t\t\tref: sui,\n\t\t\t\t\ttype: `0x2::coin::Coin<${coinType}>`,\n\t\t\t\t} as never);\n\t\t\t} else {\n\t\t\t\tconst coins = (await this.#getCoinsByType(coinType)).map((coin) => coin.coinObjectId);\n\n\t\t\t\tif (coins.length > 1) {\n\t\t\t\t\ttx.mergeCoins(coins[0], coins.slice(1));\n\t\t\t\t}\n\t\t\t\tconst [split] = tx.splitCoins(coins[0], [amount]);\n\t\t\t\trefsWithType.push({\n\t\t\t\t\tref: split,\n\t\t\t\t\ttype: `0x2::coin::Coin<${coinType}>`,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn refsWithType;\n\t}\n\n\tasync #createSendTransactionWithoutContract({\n\t\ttransaction: tx = new Transaction(),\n\t\tcalculateGas,\n\t}: CreateZkSendLinkOptions = {}) {\n\t\tconst gasEstimateFromDryRun = await this.#estimateClaimGasFee();\n\t\tconst baseGasAmount = calculateGas\n\t\t\t? await calculateGas({\n\t\t\t\t\tbalances: this.balances,\n\t\t\t\t\tobjects: [...this.objectIds],\n\t\t\t\t\tgasEstimateFromDryRun,\n\t\t\t\t})\n\t\t\t: gasEstimateFromDryRun * 2n;\n\n\t\t// Ensure that rounded gas is not less than the calculated gas\n\t\tconst gasWithBuffer = baseGasAmount + 1013n;\n\t\t// Ensure that gas amount ends in 987\n\t\tconst roundedGasAmount = gasWithBuffer - (gasWithBuffer % 1000n) - 13n;\n\n\t\tconst address = this.keypair.toSuiAddress();\n\t\tconst objectsToTransfer = (await this.#objectsToTransfer(tx)).map((obj) => obj.ref);\n\t\tconst [gas] = tx.splitCoins(tx.gas, [roundedGasAmount]);\n\t\tobjectsToTransfer.push(gas);\n\n\t\ttx.setSenderIfNotSet(this.sender);\n\t\ttx.transferObjects(objectsToTransfer, address);\n\n\t\treturn tx;\n\t}\n\n\tasync #estimateClaimGasFee(): Promise<bigint> {\n\t\tconst tx = new Transaction();\n\t\ttx.setSender(this.sender);\n\t\ttx.setGasPayment([]);\n\t\ttx.transferObjects([tx.gas], this.keypair.toSuiAddress());\n\n\t\tconst idsToTransfer = [...this.objectIds];\n\n\t\tfor (const [coinType] of this.balances) {\n\t\t\tconst coins = await this.#getCoinsByType(coinType);\n\n\t\t\tif (!coins.length) {\n\t\t\t\tthrow new Error(`Sending account does not contain any coins of type ${coinType}`);\n\t\t\t}\n\n\t\t\tidsToTransfer.push(coins[0].coinObjectId);\n\t\t}\n\n\t\tif (idsToTransfer.length > 0) {\n\t\t\ttx.transferObjects(\n\t\t\t\tidsToTransfer.map((id) => tx.object(id)),\n\t\t\t\tthis.keypair.toSuiAddress(),\n\t\t\t);\n\t\t}\n\n\t\tconst result = await this.#client.dryRunTransactionBlock({\n\t\t\ttransactionBlock: await tx.build({ client: this.#client }),\n\t\t});\n\n\t\treturn (\n\t\t\tBigInt(result.effects.gasUsed.computationCost) +\n\t\t\tBigInt(result.effects.gasUsed.storageCost) -\n\t\t\tBigInt(result.effects.gasUsed.storageRebate)\n\t\t);\n\t}\n\n\tasync #getCoinsByType(coinType: string) {\n\t\tif (this.#coinsByType.has(coinType)) {\n\t\t\treturn this.#coinsByType.get(coinType)!;\n\t\t}\n\n\t\tconst coins = await this.#client.getCoins({\n\t\t\tcoinType,\n\t\t\towner: this.sender,\n\t\t});\n\n\t\tthis.#coinsByType.set(coinType, coins.data);\n\n\t\treturn coins.data;\n\t}\n\n\tstatic async createLinks({\n\t\tlinks,\n\t\tnetwork = 'mainnet',\n\t\tclient = new SuiClient({ url: getFullnodeUrl(network) }),\n\t\ttransaction = new Transaction(),\n\t\tcontract: contractIds = getContractIds(network),\n\t}: {\n\t\ttransaction?: Transaction;\n\t\tclient?: SuiClient;\n\t\tnetwork?: 'mainnet' | 'testnet';\n\t\tlinks: ZkSendLinkBuilder[];\n\t\tcontract?: ZkBagContractOptions;\n\t}) {\n\t\tconst contract = new ZkBag(contractIds.packageId, contractIds);\n\t\tconst store = transaction.object(contract.ids.bagStoreId);\n\n\t\tconst coinsByType = new Map<string, CoinStruct[]>();\n\t\tconst allIds = links.flatMap((link) => [...link.objectIds]);\n\t\tconst sender = links[0].sender;\n\t\ttransaction.setSenderIfNotSet(sender);\n\n\t\tawait Promise.all(\n\t\t\t[...new Set(links.flatMap((link) => [...link.balances.keys()]))].map(async (coinType) => {\n\t\t\t\tconst coins = await client.getCoins({\n\t\t\t\t\tcoinType,\n\t\t\t\t\towner: sender,\n\t\t\t\t});\n\n\t\t\t\tcoinsByType.set(\n\t\t\t\t\tcoinType,\n\t\t\t\t\tcoins.data.filter((coin) => !allIds.includes(coin.coinObjectId)),\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\n\t\tconst objectRefs = new Map<\n\t\t\tstring,\n\t\t\t{\n\t\t\t\tref: TransactionObjectArgument;\n\t\t\t\ttype: string;\n\t\t\t}\n\t\t>();\n\n\t\tconst pageSize = 50;\n\t\tlet offset = 0;\n\t\twhile (offset < allIds.length) {\n\t\t\tlet chunk = allIds.slice(offset, offset + pageSize);\n\t\t\toffset += pageSize;\n\n\t\t\tconst objects = await client.multiGetObjects({\n\t\t\t\tids: chunk,\n\t\t\t\toptions: {\n\t\t\t\t\tshowType: true,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tfor (const [i, res] of objects.entries()) {\n\t\t\t\tif (!res.data || res.error) {\n\t\t\t\t\tthrow new Error(`Failed to load object ${chunk[i]} (${res.error?.code})`);\n\t\t\t\t}\n\t\t\t\tobjectRefs.set(chunk[i], {\n\t\t\t\t\tref: transaction.objectRef({\n\t\t\t\t\t\tversion: res.data.version,\n\t\t\t\t\t\tdigest: res.data.digest,\n\t\t\t\t\t\tobjectId: res.data.objectId,\n\t\t\t\t\t}),\n\t\t\t\t\ttype: res.data.type!,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconst mergedCoins = new Map<string, TransactionObjectArgument>([\n\t\t\t[SUI_COIN_TYPE, transaction.gas],\n\t\t]);\n\n\t\tfor (const [coinType, coins] of coinsByType) {\n\t\t\tif (coinType === SUI_COIN_TYPE) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst [first, ...rest] = coins.map((coin) =>\n\t\t\t\ttransaction.objectRef({\n\t\t\t\t\tobjectId: coin.coinObjectId,\n\t\t\t\t\tversion: coin.version,\n\t\t\t\t\tdigest: coin.digest,\n\t\t\t\t}),\n\t\t\t);\n\t\t\tif (rest.length > 0) {\n\t\t\t\ttransaction.mergeCoins(first, rest);\n\t\t\t}\n\t\t\tmergedCoins.set(coinType, transaction.object(first));\n\t\t}\n\n\t\tfor (const link of links) {\n\t\t\tconst receiver = link.keypair.toSuiAddress();\n\t\t\ttransaction.add(contract.new({ arguments: [store, receiver] }));\n\n\t\t\tlink.objectRefs.forEach(({ ref, type }) => {\n\t\t\t\ttransaction.add(\n\t\t\t\t\tcontract.add({\n\t\t\t\t\t\targuments: [store, receiver, ref],\n\t\t\t\t\t\ttypeArguments: [type],\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tlink.objectIds.forEach((id) => {\n\t\t\t\tconst object = objectRefs.get(id);\n\t\t\t\tif (!object) {\n\t\t\t\t\tthrow new Error(`Object ${id} not found`);\n\t\t\t\t}\n\t\t\t\ttransaction.add(\n\t\t\t\t\tcontract.add({\n\t\t\t\t\t\targuments: [store, receiver, object.ref],\n\t\t\t\t\t\ttypeArguments: [object.type],\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\tfor (const [coinType, merged] of mergedCoins) {\n\t\t\tconst linksWithCoin = links.filter((link) => link.balances.has(coinType));\n\t\t\tif (linksWithCoin.length === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst balances = linksWithCoin.map((link) => link.balances.get(coinType)!);\n\t\t\tconst splits = transaction.splitCoins(merged, balances);\n\t\t\tfor (const [i, link] of linksWithCoin.entries()) {\n\t\t\t\ttransaction.add(\n\t\t\t\t\tcontract.add({\n\t\t\t\t\t\targuments: [store, link.keypair.toSuiAddress(), splits[i]],\n\t\t\t\t\t\ttypeArguments: [`0x2::coin::Coin<${coinType}>`],\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn transaction;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
