var __typeError = (msg) => {
  throw TypeError(msg);
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);
var _popup, _id, _origin, _name, _network, _promise, _resolve, _reject, _interval, _listener, _StashedPopup_instances, cleanup_fn, _request;
import { parse, safeParse } from "valibot";
import { withResolvers } from "../../utils/withResolvers.js";
import { StashedRequest, StashedResponse } from "./events.js";
const DEFAULT_STASHED_ORIGIN = "https://getstashed.com";
class StashedPopup {
  constructor({
    name,
    network,
    origin = DEFAULT_STASHED_ORIGIN
  }) {
    __privateAdd(this, _StashedPopup_instances);
    __privateAdd(this, _popup);
    __privateAdd(this, _id);
    __privateAdd(this, _origin);
    __privateAdd(this, _name);
    __privateAdd(this, _network);
    __privateAdd(this, _promise);
    __privateAdd(this, _resolve);
    __privateAdd(this, _reject);
    __privateAdd(this, _interval, null);
    __privateAdd(this, _listener, (event) => {
      if (event.origin !== __privateGet(this, _origin)) {
        return;
      }
      const { success, output } = safeParse(StashedResponse, event.data);
      if (!success || output.id !== __privateGet(this, _id)) return;
      __privateMethod(this, _StashedPopup_instances, cleanup_fn).call(this);
      if (output.payload.type === "reject") {
        __privateGet(this, _reject).call(this, new Error("User rejected the request"));
      } else if (output.payload.type === "resolve") {
        __privateGet(this, _resolve).call(this, output.payload.data);
      }
    });
    const popup = window.open("about:blank", "_blank");
    if (!popup) {
      throw new Error("Failed to open new window");
    }
    __privateSet(this, _popup, popup);
    __privateSet(this, _id, crypto.randomUUID());
    __privateSet(this, _origin, origin);
    __privateSet(this, _name, name);
    __privateSet(this, _network, network);
    const { promise, resolve, reject } = withResolvers();
    __privateSet(this, _promise, promise);
    __privateSet(this, _resolve, resolve);
    __privateSet(this, _reject, reject);
    __privateSet(this, _interval, setInterval(() => {
      try {
        if (__privateGet(this, _popup).closed) {
          __privateMethod(this, _StashedPopup_instances, cleanup_fn).call(this);
          reject(new Error("User closed the Stashed window"));
        }
      } catch {
      }
    }, 1e3));
  }
  send({
    type,
    ...data
  }) {
    window.addEventListener("message", __privateGet(this, _listener));
    __privateGet(this, _popup).location.assign(
      `${__privateGet(this, _origin)}/dapp/${type}?${new URLSearchParams({
        id: __privateGet(this, _id),
        origin: window.origin,
        network: __privateGet(this, _network),
        name: __privateGet(this, _name)
      })}${data ? `#${new URLSearchParams(data)}` : ""}`
    );
    return __privateGet(this, _promise);
  }
  close() {
    __privateMethod(this, _StashedPopup_instances, cleanup_fn).call(this);
    __privateGet(this, _popup).close();
  }
}
_popup = new WeakMap();
_id = new WeakMap();
_origin = new WeakMap();
_name = new WeakMap();
_network = new WeakMap();
_promise = new WeakMap();
_resolve = new WeakMap();
_reject = new WeakMap();
_interval = new WeakMap();
_listener = new WeakMap();
_StashedPopup_instances = new WeakSet();
cleanup_fn = function() {
  if (__privateGet(this, _interval)) {
    clearInterval(__privateGet(this, _interval));
    __privateSet(this, _interval, null);
  }
  window.removeEventListener("message", __privateGet(this, _listener));
};
const _StashedHost = class _StashedHost {
  constructor(request) {
    __privateAdd(this, _request);
    if (typeof window === "undefined" || !window.opener) {
      throw new Error(
        "StashedHost can only be used in a window opened through `window.open`. `window.opener` is not available."
      );
    }
    __privateSet(this, _request, request);
  }
  static fromUrl(url = window.location.href) {
    const parsed = new URL(url);
    const urlHashData = parsed.hash ? Object.fromEntries(
      [...new URLSearchParams(parsed.hash.slice(1))].map(([key, value]) => [
        key,
        value.replace(/ /g, "+")
      ])
    ) : {};
    const request = parse(StashedRequest, {
      id: parsed.searchParams.get("id"),
      origin: parsed.searchParams.get("origin"),
      name: parsed.searchParams.get("name"),
      payload: {
        type: parsed.pathname.split("/").pop(),
        ...urlHashData
      }
    });
    return new _StashedHost(request);
  }
  getRequestData() {
    return __privateGet(this, _request);
  }
  sendMessage(payload) {
    window.opener.postMessage(
      {
        id: __privateGet(this, _request).id,
        source: "zksend-channel",
        payload
      },
      __privateGet(this, _request).origin
    );
  }
  close(payload) {
    if (payload) {
      this.sendMessage(payload);
    }
    window.close();
  }
};
_request = new WeakMap();
let StashedHost = _StashedHost;
export {
  DEFAULT_STASHED_ORIGIN,
  StashedHost,
  StashedPopup,
  StashedRequest,
  StashedResponse
};
//# sourceMappingURL=index.js.map
