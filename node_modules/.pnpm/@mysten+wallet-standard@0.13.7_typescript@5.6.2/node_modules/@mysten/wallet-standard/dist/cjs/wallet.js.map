{
  "version": 3,
  "sources": ["../../src/wallet.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs } from '@mysten/sui/bcs';\nimport { Transaction } from '@mysten/sui/transactions';\nimport { fromBase64, toBase64 } from '@mysten/sui/utils';\nimport type { WalletWithFeatures } from '@wallet-standard/core';\n\nimport type {\n\tSuiSignAndExecuteTransactionInput,\n\tSuiSignTransactionInput,\n\tSuiWalletFeatures,\n} from './features/index.js';\n\ndeclare module '@wallet-standard/core' {\n\texport interface Wallet {\n\t\t/**\n\t\t * Unique identifier of the Wallet.\n\t\t *\n\t\t * If not provided, the wallet name will be used as the identifier.\n\t\t */\n\t\treadonly id?: string;\n\t}\n\n\texport interface StandardConnectOutput {\n\t\tsupportedIntents?: string[];\n\t}\n}\n\nexport type { Wallet } from '@wallet-standard/core';\n\nexport async function signAndExecuteTransaction(\n\twallet: WalletWithFeatures<Partial<SuiWalletFeatures>>,\n\tinput: SuiSignAndExecuteTransactionInput,\n) {\n\tif (wallet.features['sui:signAndExecuteTransaction']) {\n\t\treturn wallet.features['sui:signAndExecuteTransaction'].signAndExecuteTransaction(input);\n\t}\n\n\tif (!wallet.features['sui:signAndExecuteTransactionBlock']) {\n\t\tthrow new Error(\n\t\t\t`Provided wallet (${wallet.name}) does not support the signAndExecuteTransaction feature.`,\n\t\t);\n\t}\n\n\tconst { signAndExecuteTransactionBlock } = wallet.features['sui:signAndExecuteTransactionBlock'];\n\n\tconst transactionBlock = Transaction.from(await input.transaction.toJSON());\n\tconst { digest, rawEffects, rawTransaction } = await signAndExecuteTransactionBlock({\n\t\taccount: input.account,\n\t\tchain: input.chain,\n\t\ttransactionBlock,\n\t\toptions: {\n\t\t\tshowRawEffects: true,\n\t\t\tshowRawInput: true,\n\t\t},\n\t});\n\n\tconst [\n\t\t{\n\t\t\ttxSignatures: [signature],\n\t\t\tintentMessage: { value: bcsTransaction },\n\t\t},\n\t] = bcs.SenderSignedData.parse(fromBase64(rawTransaction!));\n\n\tconst bytes = bcs.TransactionData.serialize(bcsTransaction).toBase64();\n\n\treturn {\n\t\tdigest,\n\t\tsignature,\n\t\tbytes,\n\t\teffects: toBase64(new Uint8Array(rawEffects!)),\n\t};\n}\n\nexport async function signTransaction(\n\twallet: WalletWithFeatures<Partial<SuiWalletFeatures>>,\n\tinput: SuiSignTransactionInput,\n) {\n\tif (wallet.features['sui:signTransaction']) {\n\t\treturn wallet.features['sui:signTransaction'].signTransaction(input);\n\t}\n\n\tif (!wallet.features['sui:signTransactionBlock']) {\n\t\tthrow new Error(\n\t\t\t`Provided wallet (${wallet.name}) does not support the signTransaction feature.`,\n\t\t);\n\t}\n\n\tconst { signTransactionBlock } = wallet.features['sui:signTransactionBlock'];\n\n\tconst transaction = Transaction.from(await input.transaction.toJSON());\n\tconst { transactionBlockBytes, signature } = await signTransactionBlock({\n\t\ttransactionBlock: transaction,\n\t\taccount: input.account,\n\t\tchain: input.chain,\n\t});\n\n\treturn { bytes: transactionBlockBytes, signature };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,iBAAoB;AACpB,0BAA4B;AAC5B,mBAAqC;AA0BrC,eAAsB,0BACrB,QACA,OACC;AACD,MAAI,OAAO,SAAS,+BAA+B,GAAG;AACrD,WAAO,OAAO,SAAS,+BAA+B,EAAE,0BAA0B,KAAK;AAAA,EACxF;AAEA,MAAI,CAAC,OAAO,SAAS,oCAAoC,GAAG;AAC3D,UAAM,IAAI;AAAA,MACT,oBAAoB,OAAO,IAAI;AAAA,IAChC;AAAA,EACD;AAEA,QAAM,EAAE,+BAA+B,IAAI,OAAO,SAAS,oCAAoC;AAE/F,QAAM,mBAAmB,gCAAY,KAAK,MAAM,MAAM,YAAY,OAAO,CAAC;AAC1E,QAAM,EAAE,QAAQ,YAAY,eAAe,IAAI,MAAM,+BAA+B;AAAA,IACnF,SAAS,MAAM;AAAA,IACf,OAAO,MAAM;AAAA,IACb;AAAA,IACA,SAAS;AAAA,MACR,gBAAgB;AAAA,MAChB,cAAc;AAAA,IACf;AAAA,EACD,CAAC;AAED,QAAM;AAAA,IACL;AAAA,MACC,cAAc,CAAC,SAAS;AAAA,MACxB,eAAe,EAAE,OAAO,eAAe;AAAA,IACxC;AAAA,EACD,IAAI,eAAI,iBAAiB,UAAM,yBAAW,cAAe,CAAC;AAE1D,QAAM,QAAQ,eAAI,gBAAgB,UAAU,cAAc,EAAE,SAAS;AAErE,SAAO;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA,aAAS,uBAAS,IAAI,WAAW,UAAW,CAAC;AAAA,EAC9C;AACD;AAEA,eAAsB,gBACrB,QACA,OACC;AACD,MAAI,OAAO,SAAS,qBAAqB,GAAG;AAC3C,WAAO,OAAO,SAAS,qBAAqB,EAAE,gBAAgB,KAAK;AAAA,EACpE;AAEA,MAAI,CAAC,OAAO,SAAS,0BAA0B,GAAG;AACjD,UAAM,IAAI;AAAA,MACT,oBAAoB,OAAO,IAAI;AAAA,IAChC;AAAA,EACD;AAEA,QAAM,EAAE,qBAAqB,IAAI,OAAO,SAAS,0BAA0B;AAE3E,QAAM,cAAc,gCAAY,KAAK,MAAM,MAAM,YAAY,OAAO,CAAC;AACrE,QAAM,EAAE,uBAAuB,UAAU,IAAI,MAAM,qBAAqB;AAAA,IACvE,kBAAkB;AAAA,IAClB,SAAS,MAAM;AAAA,IACf,OAAO,MAAM;AAAA,EACd,CAAC;AAED,SAAO,EAAE,OAAO,uBAAuB,UAAU;AAClD;",
  "names": []
}
